{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Field","name","type","key","Object","classCallCheck","this","split","quote","startsWith","line","result","i","length","String","join","Table","keys","data","fields","link","field","linkToTable","arguments","undefined","push","includes","id","f","_this","forEach","condition","_this2","toKeep","toRemove","elt","t","map","getValue","_this3","subset","insertInto","generateConstraintStatement","_this4","constraint","TVShowMini","image","props","show","react_default","a","createElement","Col_default","sm","Image_default","src","medium","rounded","fluid","Row_default","children","Component","TVShow","Card_default","bg","text","Header","Title","Img","variant","Text","Body","dangerouslySetInnerHTML","__html","summary","TVShowSelected","_this5","Tab_default","Content","table","Pane","eventKey","toString","App_TVShow","TVShowList","_this6","list","ListGroup_default","Item","action","href","App_TVShowMini","Button_default","onClick","size","textButton","TVShowQuery","_this7","possibleConstructorReturn","getPrototypeOf","call","state","found","selection","textInput","React","createRef","serie","addField","personnage","personne","jouer","setKey","episode","genre","poste","handleSubmit","bind","assertThisInitialized","handleRemoveShow","handleAddShow","downloadSQLFile","event","_this8","query","current","value","ids","slice","replace","parseInt","fetch","then","json","add","setState","preventDefault","filter","_this9","console","log","cast","_embedded","person","character","personneId","personnageId","idSerie","idPersonnage","idPersonne","crew","titre","episodes","genres","oldState","concat","_this10","personneToKeep","personnageToKeep","removeUnused","generateCreateStatement","generateAllInsert","element","document","file","Blob","URL","createObjectURL","download","body","appendChild","click","Container","Navbar_default","Brand","logo","width","height","className","alt","Nav_default","Link","disabled","Form_default","inline","onSubmit","FormControl_default","placeholder","ref","autoFocus","style","marginTop","Badge_default","pill","App_TVShowList","App_TVShowSelected","App","App_TVShowQuery","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcdb7b49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8f6daf1f.svg\";","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Tab from 'react-bootstrap/Tab'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Card from 'react-bootstrap/Card'\nimport Badge from 'react-bootstrap/Badge'\nimport Image from 'react-bootstrap/Image'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass Field {\n  constructor(name,type,key){\n    this.name = name;\n    this.type = type;\n    this.key = key.split(\".\"); // handle inner properties s.a. \"image.medium\"\n    this.quote = !this.type.startsWith(\"int\") && !this.type.startsWith(\"dec\");\n  }\n\n  getValue(line){\n    let result = line;\n    for(let i= 0; i < this.key.length; ++i){\n        result = result[this.key[i]];\n        if (result === null || typeof result === 'undefined') return \"null\";\n    }\n\n    result = String(result);\n    result = result.split(\"\\\"\").join(\"\\\\\\\"\");\n    if (this.quote) return \"\\\"\"+result+\"\\\"\";\n    return result;\n  }\n}\n\nclass Table {\n  constructor(name){\n    this.name = name; // nom de la table\n    this.keys = []; // id des éléments de la table\n    this.data = {}; // {id:ligne}\n    this.fields = []; // liste des champs\n    this.key=\"`id`\"; // clef primaire à déclarer en SQL\n    this.link= {}; // clefs étrangères {nom_du_champ: table}\n  }\n\n  addField(field, linkToTable = null){\n    this.fields.push(field);\n    if (linkToTable) this.link[field.name] = linkToTable;\n  }\n\n  setKey(key){\n    this.key = key;\n  }\n\n  add(data){\n    if (!this.keys.includes(data.id)) {\n      this.data[data.id]=data;\n      this.keys.push(data.id);\n    }\n  }\n\n  forEach(f){\n    this.keys.forEach((key)=>{f(this.data[key]);});\n  }\n\n  filter(condition){\n    let toKeep = [];\n    let toRemove = [];\n\n    this.keys.forEach((key)=>{\n      if (condition(this.data[key])) toKeep.push(key);\n      else toRemove.push(key);\n    });\n\n    this.keys = toKeep;\n    toRemove.forEach((key)=>{delete this.data[key];});\n  }\n\n\n  generateInsert(elt){\n    const t = this.fields.map((field)=>field.getValue(elt));\n    return \"INSERT INTO \"+this.name+\" VALUES (\"+t.join()+\");\\n\";\n  }\n\n  generateAllInsert(subset = null){// subset : la liste des ids que l'on garde\n    if (subset == null) subset = this.keys; // si pas précisé, on garde tout\n    if (!subset.length) return \"\"; //pas de données, pas de requête...\n\n    const insertInto = \"REPLACE INTO \"+this.name+\" VALUES\\n\";\n    var result = \"\";\n    const data = subset.map((id)=>{ // On associe à chaque id le nuplet correspondant\n      const elt = this.data[id]; // en regroupant tous les champs\n      return \"(\"+this.fields.map((field)=>field.getValue(elt)).join()+\")\"\n    });\n    for(let i=0; i<data.length; i++){\n      if (i%100===0) result += insertInto;\n      result += data[i] + ((i<data.length-1 && i%100 < 99) ? \",\\n\" : \";\\n\");\n    }\n    result += \"\\n\";\n    return result;\n  }\n\n  generateCreateStatement(){\n    var result = \"CREATE TABLE IF NOT EXISTS \"+this.name+\" (\\n\";\n    this.fields.forEach(field=>{\n      result += \"`\"+field.name+\"` \"+field.type+\",\\n\";\n    });\n    result += \"PRIMARY KEY (\"+this.key+\")\";\n    for(let key in this.link) result += \",\\nKEY (`\"+key+\"`)\";\n    result += this.generateConstraintStatement();\n    result += \"\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\\n\\n\";\n    return result;\n  }\n\n  generateConstraintStatement(){\n    var result = \"\";\n    var constraint = Object.keys(this.link).map((key,i)=>{\n      return \"CONSTRAINT `\"+this.name+\"_ibfk_\"+(i+1)+\n            \"` FOREIGN KEY (`\"+key+\"`) REFERENCES `\"+\n            this.link[key].name+\"` (`id`)\";\n    })\n    if (constraint.length <1) return \"\";\n    result += \",\\n\"+constraint.join(\",\\n\");\n\n    return result;\n  }\n}\n\nclass TVShowMini extends Component {\n  render() {\n    const image = this.props.show.image ? (\n      <Col sm=\"4\">\n        <Image src={this.props.show.image.medium} rounded fluid />\n      </Col>\n    ) : (<Col sm=\"4\"></Col>);\n    return (\n      <Row>\n        {image}\n        <Col sm=\"8\">\n          <h4>{this.props.show.name}</h4>\n          {this.props.children}\n        </Col>\n      </Row>\n    )\n  }\n}\n\nclass TVShow extends Component {\n  render() {\n    return (\n    <Card bg=\"secondary\" text=\"white\" >\n    <Card.Header><Card.Title>{this.props.show.name}</Card.Title></Card.Header>\n{this.props.show.image?    <Card.Img variant=\"top\" src={this.props.show.image.medium} />\n  : <Card.Text>Pas d image</Card.Text>\n}\n    <Card.Body>\n      <Card.Text dangerouslySetInnerHTML={{__html: this.props.show.summary}} />\n    </Card.Body>\n  </Card>\n  );\n  }\n}\nclass TVShowSelected extends Component {\n  render(){\n      return (\n      <Tab.Content>{this.props.table.keys.map((id) =>\n        <Tab.Pane eventKey={\"#\"+id.toString()} key={id.toString()}>\n          <TVShow show={this.props.table.data[id]}/>\n        </Tab.Pane>)}\n      </Tab.Content>);\n  }\n}\nclass TVShowList extends Component {\n  render(){\n    if (this.props.list){\n      return (\n        <ListGroup>{this.props.list.map((id) =>\n          <ListGroup.Item key={id.toString()} action\n                          href={\"#\"+id.toString()}>\n            <TVShowMini show={this.props.table.data[id]}>\n              <Button variant=\"secondary\"\n                onClick={()=>this.props.onClick(id)}\n                size=\"lg\">\n                {this.props.textButton}\n              </Button>\n            </TVShowMini>\n          </ListGroup.Item>)}\n        </ListGroup>)\n    } else {\n      return (<div>Pas de résultat</div>);\n    }\n  }\n}\n\nclass TVShowQuery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {found: [], selection: []};\n    this.textInput = React.createRef();\n\n    this.serie =  new Table(\"serie\");\n    this.serie.addField(new Field(\"id\",\"int(11) NOT NULL\",\"id\"));\n    this.serie.addField(new Field(\"nom\",\"varchar(255) NOT NULL\",\"name\"));\n    this.serie.addField(new Field(\"resume\",\"text\",\"summary\"));\n    this.serie.addField(new Field(\"langue\",\"varchar(255)\",\"language\"));\n    this.serie.addField(new Field(\"note\",\"decimal(4,2)\",\"rating.average\"));\n    this.serie.addField(new Field(\"statut\",\"varchar(64)\",\"status\"));\n    this.serie.addField(new Field(\"premiere\",\"date\",\"premiered\"));\n    this.serie.addField(new Field(\"url\",\"varchar(255)\",\"url\"));\n    this.serie.addField(new Field(\"urlImage\",\"varchar(255)\",\"image.medium\"));\n\n    this.personnage = new Table(\"personnage\");\n    this.personnage.addField(new Field(\"id\",\"int(11) NOT NULL\",\"id\"));\n    this.personnage.addField(new Field(\"nom\",\"varchar(255) NOT NULL\",\"name\"));\n    this.personnage.addField(new Field(\"urlImage\",\"varchar(255)\",\"image.medium\"));\n\n    this.personne = new Table(\"personne\");\n    this.personne.addField(new Field(\"id\",\"int(11) NOT NULL\",\"id\"));\n    this.personne.addField(new Field(\"nom\",\"varchar(255) NOT NULL\",\"name\"));\n    this.personne.addField(new Field(\"urlImage\",\"varchar(255)\",\"image.medium\"));\n    this.personne.addField(new Field(\"url\",\"varchar(255)\",\"url\"));\n    this.personne.addField(new Field(\"naissance\",\"date\",\"birthday\"));\n    this.personne.addField(new Field(\"mort\",\"date\",\"deathday\"));\n    this.personne.addField(new Field(\"pays\",\"varchar(255)\",\"country.name\"));\n\n    this.jouer = new Table(\"jouer\");\n    this.jouer.addField(new Field(\"idSerie\",\"int(11) NOT NULL\",\"idSerie\"), this.serie);\n    this.jouer.addField(new Field(\"idPersonnage\",\"int(11) NOT NULL\",\"idPersonnage\"), this.personnage);\n    this.jouer.addField(new Field(\"idPersonne\",\"int(11) NOT NULL\",\"idPersonne\"), this.personne);\n    this.jouer.setKey(\"`idSerie`,`idPersonnage`,`idPersonne`\");\n\n    this.episode = new Table(\"episode\");\n    this.episode.addField(new Field(\"id\",\"int(11) NOT NULL\",\"id\"));\n    this.episode.addField(new Field(\"nom\",\"varchar(255) NOT NULL\",\"name\"));\n    this.episode.addField(new Field(\"idSerie\",\"int(11) NOT NULL\",\"idSerie\"), this.serie);\n    this.episode.addField(new Field(\"resume\",\"text\",\"summary\"));\n    this.episode.addField(new Field(\"numero\",\"int(11)\",\"number\"));\n    this.episode.addField(new Field(\"saison\",\"int(11)\",\"season\"));\n    this.episode.addField(new Field(\"duree\",\"int(11)\",\"runtime\"));\n    this.episode.addField(new Field(\"premiere\",\"date\",\"airdate\"));\n    this.episode.addField(new Field(\"urlImage\",\"varchar(255)\",\"image.medium\"));\n    this.episode.addField(new Field(\"url\",\"varchar(255)\",\"url\"));\n\n    this.genre = new Table(\"genre\");\n    this.genre.addField(new Field(\"id\",\"int(11) NOT NULL\",\"id\"));\n    this.genre.addField(new Field(\"idSerie\",\"int(11) NOT NULL\",\"idSerie\"));\n    this.genre.addField(new Field(\"nom\",\"varchar(255) NOT NULL\",\"name\"));\n\n    this.poste = new Table(\"poste\");\n    this.poste.addField(new Field(\"idSerie\",\"int(11) NOT NULL\",\"idSerie\"),this.serie);\n    this.poste.addField(new Field(\"idPersonne\",\"int(11) NOT NULL\",\"idPersonne\"),this.personne);\n    this.poste.addField(new Field(\"titre\",\"varchar(100) NOT NULL\",\"titre\"));\n    this.poste.setKey(\"`idSerie`,`idPersonne`,`titre`\");\n\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRemoveShow = this.handleRemoveShow.bind(this);\n    this.handleAddShow = this.handleAddShow.bind(this);\n    this.downloadSQLFile = this.downloadSQLFile.bind(this);\n  }\n\n\n\n  handleSubmit(event) {\n    const query = this.textInput.current.value;\n\n    if (query.startsWith(\"#\")){// si la requète commence par # on extrait les ids\n      const ids=query.slice(1,query.length).replace(/\\s+/g, '').split(\",\");\n      // ex : # 1,2,3    donne [1,2,3]\n      for(let i=0; i< ids.length; ++i){\n        this.handleAddShow(parseInt(ids[i]));\n      }\n    } else {\n    fetch(`https://api.tvmaze.com/search/shows?q=`+query)\n      .then(result=>result.json())\n      .then((result)=>{\n        for(let line in result) {\n          this.serie.add(result[line].show);\n        }\n        this.setState({found : result.map(line=>line.show.id)});\n      });\n    event.preventDefault();\n    }\n  }\n\n  handleRemoveShow(id) {\n    this.setState({selection: this.state.selection.filter((elt) => (elt !== id))});\n  }\n\n  handleAddShow(id) {\n//    const id = show.id;\n    if (!this.state.selection.includes(id)){\n      fetch(`https://api.tvmaze.com/shows/`+id+\n            `?embed[]=cast&embed[]=crew&embed[]=episodes`)\n        .then(result=>result.json())\n        .then((result)=>{\n          console.log(result);\n          this.serie.add(result);\n\n          const cast = result._embedded.cast;\n          for(let i = 0; i< cast.length;++i){\n            this.personne.add(cast[i].person);\n            this.personnage.add(cast[i].character);\n            const personneId = cast[i].person.id;\n            const personnageId = cast[i].character.id;\n            this.jouer.add({id:id+\"/\"+personneId+\"/\"+personnageId,\n              idSerie:id,\n              idPersonnage:personnageId,\n              idPersonne:personneId});\n          }\n\n          const crew = result._embedded.crew;\n          for(let i = 0; i< crew.length;++i){\n            this.personne.add(crew[i].person);\n            const personneId = crew[i].person.id;\n            const titre = crew[i].type;\n            this.poste.add({id:id+\"/\"+personneId+\"/titre\",\n              idSerie:id,\n              idPersonne:personneId,\n              titre:titre});\n          }\n\n          const episodes = result._embedded.episodes;\n          for(let i = 0; i< episodes.length;++i){\n            episodes[i].idSerie = id;\n            this.episode.add(episodes[i]);\n          }\n\n          const genres = result.genres;\n          for(let i = 0; i< genres.length;++i){\n            this.genre.add({id:id*10+i,\n              idSerie:id,\n              name:genres[i]});\n          }\n\n\n          this.setState((oldState) => {\n                      const newSelection = oldState.selection.includes(id) ?\n                            oldState.selection : [id].concat(oldState.selection);\n                      return {\n                        selection: newSelection,\n                        found: oldState.found.filter((elt) => (elt !== id))\n                      }});\n          });\n    }\n  }\n\n  removeUnused(){\n    this.episode.filter(episode=>this.state.selection.includes(episode.idSerie)||\n                                  this.state.found.includes(episode.idSerie));\n    this.jouer.filter(jouer=>this.state.selection.includes(jouer.idSerie));\n    this.poste.filter(poste=>this.state.selection.includes(poste.idSerie));\n    var personneToKeep = {};\n    var personnageToKeep = {};\n    this.jouer.forEach((jouer)=>{\n      personnageToKeep[jouer.idPersonnage] =true;\n      personneToKeep[jouer.idPersonne] = true;\n    });\n    this.poste.forEach((poste)=>{\n      personneToKeep[poste.idPersonne] = true;\n    });\n    this.personnage.filter(personnage=>personnageToKeep[personnage.id]);\n    this.personne.filter(personne=>personneToKeep[personne.id]);\n  }\n\n  downloadSQLFile() {\n    this.removeUnused();\n\n    var result = \"# Fichier généré avec les données de TVmaze, en CC-BY-SA. https://www.tvmaze.com/api \\n\";\n    result +=\"# Liste des séries incluses, par id :\\n\";\n    result +=\"# \"+this.state.selection.join(\",\")+\"\\n\\n\\n\";\n\n    result+=this.serie.generateCreateStatement();\n    result+=this.personne.generateCreateStatement();\n    result+=this.personnage.generateCreateStatement();\n    result+=this.jouer.generateCreateStatement();\n    result+=this.episode.generateCreateStatement();\n    result+=this.genre.generateCreateStatement();\n    result+=this.poste.generateCreateStatement();\n\n    // On désactive les vérifications de clefs étrangères pour utiliser REPLACE\n    result +=\"SET foreign_key_checks = 0;\\n\\n\";\n\n    result+=this.serie.generateAllInsert(this.state.selection);\n    result+=this.personne.generateAllInsert();\n    result+=this.personnage.generateAllInsert();\n    result+=this.jouer.generateAllInsert();\n    result+=this.episode.generateAllInsert();\n    result+=this.genre.generateAllInsert();\n    result+=this.poste.generateAllInsert();\n\n    // On réactive. Ou pas\n    //result +=\"SET foreign_key_checks = 1;\\n\";\n\n    console.log(result);\n\n      const element = document.createElement(\"a\");\n      const file = new Blob([result], {type: 'text/plain'});\n      element.href = URL.createObjectURL(file);\n      element.download = \"tvshows.sql\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    }\n\n  render() {\n    return (\n  <Tab.Container>\n\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">\n    <img src={logo} width=\"45\" height=\"45\" className=\"d-inline-block align-top\"\n          alt=\"Serie2SQL\"/>\n    </Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"https://www.tvmaze.com/api\">Données : TVMaze API</Nav.Link>\n      <Button variant=\"outline-info\" disabled={this.state.selection.length === 0}\n        onClick={this.downloadSQLFile}>\n        Exporter la sélection en SQL\n        </Button>\n    </Nav>\n    <Form inline onSubmit={this.handleSubmit}>\n      <FormControl type=\"text\" placeholder=\"Nom de la série\" className=\"mr-sm-2\"\n        ref={this.textInput}\n        autoFocus={true} />\n      <Button variant=\"outline-info\" type=\"submit\">Rechercher</Button>\n    </Form>\n  </Navbar>\n  <div style={{marginTop:\"1em\"}} />\n  <Row>\n    <Col sm={4}>\n      <h4>Sélection <Badge pill variant=\"info\">{this.state.selection.length} séries</Badge></h4>\n      <TVShowList list={this.state.selection} table={this.serie} onClick={this.handleRemoveShow}\n                  textButton=\"Retirer\"/>\n    </Col>\n    <Col sm={4}>\n      <h4>Résultats de recherche</h4>\n      <TVShowList list={this.state.found} table={this.serie} onClick={this.handleAddShow}\n                  textButton=\"Ajouter\"/>\n    </Col>\n    <Col sm={4}>\n      <h4>Détail de la sélection</h4>\n      <TVShowSelected table={this.serie}/>\n    </Col>\n  </Row>\n  </Tab.Container>\n    );\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TVShowQuery />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}